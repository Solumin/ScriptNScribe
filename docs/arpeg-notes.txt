Arpeggio program:
arpeggio = (\\ steps note ->
    arp = map (\\ s -> transpose note s) steps;
    return toSnippet(arp);)
main = arpeggio([1, 4, 7], (D 4 qn))

(assuming existence of map and transpose!)
transpose = (\\ note step -> case note of (p o d) -> (p+step o d));
is the simplest form, but not quite enough. Needs to handle rollover!

raiseOctave = (\\ note delta -> case note of (p o d) -> (p o+delta d));
pitchOf = (\\ note -> case note of (p _ _) -> p);
transpose = (\\ note step ->
    newNote = if (step >= 12)
        then transpose(raiseOctave(note, 1), step-12)
        else case note of (p o d) -> (p+step o d);
    return if pitchOf(newNote) < pitchOf(note)
        then raiseOctave(newNote, 1)
        else newNote

Still need a definition of map, which I think requires List functions.
map = (\\ f list -> if list == [] then list else f(head(list)) : map(f, tail(list))
map = (\\ f list -> case list of
    [] -> []
    [h:t] -> f(h) : map(f, t))
Both are valid! Second one is nicer.

breve, a little music DSL
- base values: pitch classes, durations, numbers, booleans, lists (con-cells?)
- Note: [pitch, duration]
- Pitch: [pitch class, octave]
    Or Note: [pitch class, octave, duration]
- Rest: [duration]
- Snippet: [Note | Rest] | Snippet :+: Snippet
    really Snippet :: Music a, but...
- Functions, lets?

Traces:
- Source code locations: inserted by parser, refer to source code location in
  AST. But they actually use line+column? -> All numeric literals.
- Expression traces: Combine traces when *evaling* basic ops to form operations.

Instead of numeric literals, I need to trace... what? everything, basically?
Snippets, notes, durations... and numeric literals?

Take arpeggio example:
arpeggio :: [Int] -> Music Pitch -> Music Pitch;
arpeggio steps (Prim (Note d p)) = line (map (\s -> Prim(Note d (trans s p))) steps)
-- usage: arpeggio [0, 4, 7] (d 4 qn) == (d 4 qn) :+: (fs 4 qn) :+: (a 4 qn)
There's 4 literals in the usage: 0, 4, 7 and (d 4 qn). Notes need to be
first-class "literals" by themselves. In direct manipulation, there are no
pitches, just notes -- pitch, duration, etc. are all combined in a single
element.
But, when the user changes the note, they might change only one thing. Plus,
programmers may want to have pitch (and components) separate.
The final score output need to be :: Music Pitch, I think.
Slightly limits us to typical tonal Western music, but... uh... that's fine for
now.

in breve, will just have lists of notes instead of a music type.

We'll call it breve 0.1, really simple, just notes as primitives.

note: '(' pitchClass octave duration ')'
pitchClass: A | B ... etc (Eut)
octave: integer
duration: qn | etc
rest: '(' 'r' duration ')'
snippet: '[' note[, note]* ']' | snippet :=: snippet | snippet :+: snippet
main: snippet
