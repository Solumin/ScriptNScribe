Example program:
snippet1 = [(d 4 qn), (fs 4 qn), (a 4 qn)];
snippet2 = [(d 4 wn)] :=: [(fs 4 wn)] :=: [(a 4 wn)];
main = snippet1 :+: [(r qn)] :+: snippet;

commentLine = "--"
commentStart = "{-"
commentEnd = "-}"
nestedComments = True
identStart = lower <|> char '_'
identLetter = alphaNum <|> char '_' <|> char '-'
opStart = oneOf ":!#$%&*+./<=>?@\\^|-~"
opLetter = oneOf ":!#$%&*+./<=>?@\\^|-~"
reservedNames = ["snippet", pitchClasses, durations, "r"]
reservedOpNames = [] -- ??
caseSenseitive = True

Breve:
pitchclass ::= A | B | C | D | E | F | G | ... (sharps, flats, etc)
integer ::= digit { digit }*
duration ::= qn | wn ...
octave ::= number
note ::= ( pitchclass octave duration )
rest ::= ( "rest" duration )
snippet ::= '{' note {, rest }* '}'
var ::= letter { letter | digit }*
list = [ pitchclass | duration | octave | note | rest | snippet | var ]

expr ::= note | rest | list | snippet | expr duop expr
statement ::= var := expr | var := snippet | statement {; statement}*

lineComment ::= --
blockComment ::= {- ... -}

type PitchClass = E.PitchClass
type Octave = E.Octave
type Duration = E.Duration

data Expr = Note PitchClass Octave Duration | Rest Duration deriving Show
data Snippet = [Expr] | Snippet :=: Snippet | Snippet :+: Snippet deriving Show
data Statement = String := Expr | String := Snippet | Seq [Statement] deriving Show

pitchclasses = [n : m | n <- ['A'..'G'], m <- ["", "f", "ff", "s", "ss"]]
durations = ["bn","wn","hn","qn","en","sn","sfn","tn","dwn","dhn","dqn","den",
    "dsn","dtn", "ddhn","ddqn","dden"]

breveDef = emptyDef { commentStart = "{-"
                    , commentEnd = "-}"
                    , nestedComments = True
                    , commentLine = "--"
                    , identStart = lower <|> char '_'
                    , identLetter = alphaNum <|> char '_' <|> char '-'
                    , opStart = oneOf ":!#$%&*+./<=>?@\\^|-~"
                    , opLetter = oneOf ":!#$%&*+./<=>?@\\^|-~"
                    , reservedNames = pitchClasses ++ durations ++ ["rest"]
                    , reservedOpNames = [":=", ":=:", ":+:"]
                    , caseSenseitive = True
                    }

Changes:
- Primitive values: numbers (ints and floats/rationals), bools, ???
    -> Basic operations for primitive types: comparison, math...
    -> Durations: just rationals, like in Eut, and the "qn" etc. will be
    built-in functions or values/constants.
        -> No functions yet, just make Prelude of "qn = ..." forever
        -> Puts me in an odd spot with tracing though! "qn = ..." needs to be
frozen, but what happens if the user changes that value?? -> structural?
- Functions: definition (statement) and application (expression)
    -> lambdas? (would also be expression)
- Control flow: Conditionals, at least if-statements or cases?
- Types (might be overkill at the moment though.)
